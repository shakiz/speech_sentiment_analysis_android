// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/error_details.proto

package com.google.rpc;

/**
 * <pre>
 * Contains metadata about the request that clients can attach when filing a bug
 * or providing other forms of feedback.
 * </pre>
 *
 * Protobuf type {@code google.rpc.RequestInfo}
 */
public  final class RequestInfo extends
    com.google.protobuf.GeneratedMessageLite<
        RequestInfo, RequestInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:google.rpc.RequestInfo)
    RequestInfoOrBuilder {
  private RequestInfo() {
    requestId_ = "";
    servingData_ = "";
  }
  public static final int REQUEST_ID_FIELD_NUMBER = 1;
  private java.lang.String requestId_;
  /**
   * <pre>
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   * </pre>
   *
   * <code>optional string request_id = 1;</code>
   */
  public java.lang.String getRequestId() {
    return requestId_;
  }
  /**
   * <pre>
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   * </pre>
   *
   * <code>optional string request_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getRequestIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(requestId_);
  }
  /**
   * <pre>
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   * </pre>
   *
   * <code>optional string request_id = 1;</code>
   */
  private void setRequestId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    requestId_ = value;
  }
  /**
   * <pre>
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   * </pre>
   *
   * <code>optional string request_id = 1;</code>
   */
  private void clearRequestId() {
    
    requestId_ = getDefaultInstance().getRequestId();
  }
  /**
   * <pre>
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   * </pre>
   *
   * <code>optional string request_id = 1;</code>
   */
  private void setRequestIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    requestId_ = value.toStringUtf8();
  }

  public static final int SERVING_DATA_FIELD_NUMBER = 2;
  private java.lang.String servingData_;
  /**
   * <pre>
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   * </pre>
   *
   * <code>optional string serving_data = 2;</code>
   */
  public java.lang.String getServingData() {
    return servingData_;
  }
  /**
   * <pre>
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   * </pre>
   *
   * <code>optional string serving_data = 2;</code>
   */
  public com.google.protobuf.ByteString
      getServingDataBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(servingData_);
  }
  /**
   * <pre>
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   * </pre>
   *
   * <code>optional string serving_data = 2;</code>
   */
  private void setServingData(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    servingData_ = value;
  }
  /**
   * <pre>
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   * </pre>
   *
   * <code>optional string serving_data = 2;</code>
   */
  private void clearServingData() {
    
    servingData_ = getDefaultInstance().getServingData();
  }
  /**
   * <pre>
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   * </pre>
   *
   * <code>optional string serving_data = 2;</code>
   */
  private void setServingDataBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    servingData_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!requestId_.isEmpty()) {
      output.writeString(1, getRequestId());
    }
    if (!servingData_.isEmpty()) {
      output.writeString(2, getServingData());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!requestId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getRequestId());
    }
    if (!servingData_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getServingData());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.rpc.RequestInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.rpc.RequestInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.rpc.RequestInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.rpc.RequestInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.rpc.RequestInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.rpc.RequestInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.rpc.RequestInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.rpc.RequestInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.rpc.RequestInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.rpc.RequestInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.rpc.RequestInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Contains metadata about the request that clients can attach when filing a bug
   * or providing other forms of feedback.
   * </pre>
   *
   * Protobuf type {@code google.rpc.RequestInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.rpc.RequestInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.rpc.RequestInfo)
      com.google.rpc.RequestInfoOrBuilder {
    // Construct using com.google.rpc.RequestInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * An opaque string that should only be interpreted by the service generating
     * it. For example, it can be used to identify requests in the service's logs.
     * </pre>
     *
     * <code>optional string request_id = 1;</code>
     */
    public java.lang.String getRequestId() {
      return instance.getRequestId();
    }
    /**
     * <pre>
     * An opaque string that should only be interpreted by the service generating
     * it. For example, it can be used to identify requests in the service's logs.
     * </pre>
     *
     * <code>optional string request_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getRequestIdBytes() {
      return instance.getRequestIdBytes();
    }
    /**
     * <pre>
     * An opaque string that should only be interpreted by the service generating
     * it. For example, it can be used to identify requests in the service's logs.
     * </pre>
     *
     * <code>optional string request_id = 1;</code>
     */
    public Builder setRequestId(
        java.lang.String value) {
      copyOnWrite();
      instance.setRequestId(value);
      return this;
    }
    /**
     * <pre>
     * An opaque string that should only be interpreted by the service generating
     * it. For example, it can be used to identify requests in the service's logs.
     * </pre>
     *
     * <code>optional string request_id = 1;</code>
     */
    public Builder clearRequestId() {
      copyOnWrite();
      instance.clearRequestId();
      return this;
    }
    /**
     * <pre>
     * An opaque string that should only be interpreted by the service generating
     * it. For example, it can be used to identify requests in the service's logs.
     * </pre>
     *
     * <code>optional string request_id = 1;</code>
     */
    public Builder setRequestIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setRequestIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Any data that was used to serve this request. For example, an encrypted
     * stack trace that can be sent back to the service provider for debugging.
     * </pre>
     *
     * <code>optional string serving_data = 2;</code>
     */
    public java.lang.String getServingData() {
      return instance.getServingData();
    }
    /**
     * <pre>
     * Any data that was used to serve this request. For example, an encrypted
     * stack trace that can be sent back to the service provider for debugging.
     * </pre>
     *
     * <code>optional string serving_data = 2;</code>
     */
    public com.google.protobuf.ByteString
        getServingDataBytes() {
      return instance.getServingDataBytes();
    }
    /**
     * <pre>
     * Any data that was used to serve this request. For example, an encrypted
     * stack trace that can be sent back to the service provider for debugging.
     * </pre>
     *
     * <code>optional string serving_data = 2;</code>
     */
    public Builder setServingData(
        java.lang.String value) {
      copyOnWrite();
      instance.setServingData(value);
      return this;
    }
    /**
     * <pre>
     * Any data that was used to serve this request. For example, an encrypted
     * stack trace that can be sent back to the service provider for debugging.
     * </pre>
     *
     * <code>optional string serving_data = 2;</code>
     */
    public Builder clearServingData() {
      copyOnWrite();
      instance.clearServingData();
      return this;
    }
    /**
     * <pre>
     * Any data that was used to serve this request. For example, an encrypted
     * stack trace that can be sent back to the service provider for debugging.
     * </pre>
     *
     * <code>optional string serving_data = 2;</code>
     */
    public Builder setServingDataBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setServingDataBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.rpc.RequestInfo)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.rpc.RequestInfo();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.rpc.RequestInfo other = (com.google.rpc.RequestInfo) arg1;
        requestId_ = visitor.visitString(!requestId_.isEmpty(), requestId_,
            !other.requestId_.isEmpty(), other.requestId_);
        servingData_ = visitor.visitString(!servingData_.isEmpty(), servingData_,
            !other.servingData_.isEmpty(), other.servingData_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                requestId_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                servingData_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.rpc.RequestInfo.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.rpc.RequestInfo)
  private static final com.google.rpc.RequestInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new RequestInfo();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.rpc.RequestInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<RequestInfo> PARSER;

  public static com.google.protobuf.Parser<RequestInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

