// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/color.proto

package com.google.type;

/**
 * <pre>
 * Represents a color in the RGBA color space. This representation is designed
 * for simplicity of conversion to/from color representations in various
 * languages over compactness; for example, the fields of this representation
 * can be trivially provided to the constructor of "java.awt.Color" in Java; it
 * can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
 * method in iOS; and, with just a little work, it can be easily formatted into
 * a CSS "rgba()" string in JavaScript, as well. Here are some examples:
 * Example (Java):
 *      import com.google.type.Color;
 *      // ...
 *      public static java.awt.Color fromProto(Color protocolor) {
 *        float alpha = protocolor.hasAlpha()
 *            ? protocolor.getAlpha().getValue()
 *            : 1.0;
 *        return new java.awt.Color(
 *            protocolor.getRed(),
 *            protocolor.getGreen(),
 *            protocolor.getBlue(),
 *            alpha);
 *      }
 *      public static Color toProto(java.awt.Color color) {
 *        float red = (float) color.getRed();
 *        float green = (float) color.getGreen();
 *        float blue = (float) color.getBlue();
 *        float denominator = 255.0;
 *        Color.Builder resultBuilder =
 *            Color
 *                .newBuilder()
 *                .setRed(red / denominator)
 *                .setGreen(green / denominator)
 *                .setBlue(blue / denominator);
 *        int alpha = color.getAlpha();
 *        if (alpha != 255) {
 *          result.setAlpha(
 *              FloatValue
 *                  .newBuilder()
 *                  .setValue(((float) alpha) / denominator)
 *                  .build());
 *        }
 *        return resultBuilder.build();
 *      }
 *      // ...
 * Example (iOS / Obj-C):
 *      // ...
 *      static UIColor* fromProto(Color* protocolor) {
 *         float red = [protocolor red];
 *         float green = [protocolor green];
 *         float blue = [protocolor blue];
 *         FloatValue* alpha_wrapper = [protocolor alpha];
 *         float alpha = 1.0;
 *         if (alpha_wrapper != nil) {
 *           alpha = [alpha_wrapper value];
 *         }
 *         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
 *      }
 *      static Color* toProto(UIColor* color) {
 *          CGFloat red, green, blue, alpha;
 *          if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) {
 *            return nil;
 *          }
 *          Color* result = [Color alloc] init];
 *          [result setRed:red];
 *          [result setGreen:green];
 *          [result setBlue:blue];
 *          if (alpha &lt;= 0.9999) {
 *            [result setAlpha:floatWrapperWithValue(alpha)];
 *          }
 *          [result autorelease];
 *          return result;
 *     }
 *     // ...
 *  Example (JavaScript):
 *     // ...
 *     var protoToCssColor = function(rgb_color) {
 *        var redFrac = rgb_color.red || 0.0;
 *        var greenFrac = rgb_color.green || 0.0;
 *        var blueFrac = rgb_color.blue || 0.0;
 *        var red = Math.floor(redFrac * 255);
 *        var green = Math.floor(greenFrac * 255);
 *        var blue = Math.floor(blueFrac * 255);
 *        if (!('alpha' in rgb_color)) {
 *           return rgbToCssColor_(red, green, blue);
 *        }
 *        var alphaFrac = rgb_color.alpha.value || 0.0;
 *        var rgbParams = [red, green, blue].join(',');
 *        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
 *     };
 *     var rgbToCssColor_ = function(red, green, blue) {
 *       var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue);
 *       var hexString = rgbNumber.toString(16);
 *       var missingZeros = 6 - hexString.length;
 *       var resultBuilder = ['#'];
 *       for (var i = 0; i &lt; missingZeros; i++) {
 *          resultBuilder.push('0');
 *       }
 *       resultBuilder.push(hexString);
 *       return resultBuilder.join('');
 *     };
 *     // ...
 * </pre>
 *
 * Protobuf type {@code google.type.Color}
 */
public  final class Color extends
    com.google.protobuf.GeneratedMessageLite<
        Color, Color.Builder> implements
    // @@protoc_insertion_point(message_implements:google.type.Color)
    ColorOrBuilder {
  private Color() {
  }
  public static final int RED_FIELD_NUMBER = 1;
  private float red_;
  /**
   * <pre>
   * The amount of red in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float red = 1;</code>
   */
  public float getRed() {
    return red_;
  }
  /**
   * <pre>
   * The amount of red in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float red = 1;</code>
   */
  private void setRed(float value) {
    
    red_ = value;
  }
  /**
   * <pre>
   * The amount of red in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float red = 1;</code>
   */
  private void clearRed() {
    
    red_ = 0F;
  }

  public static final int GREEN_FIELD_NUMBER = 2;
  private float green_;
  /**
   * <pre>
   * The amount of green in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float green = 2;</code>
   */
  public float getGreen() {
    return green_;
  }
  /**
   * <pre>
   * The amount of green in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float green = 2;</code>
   */
  private void setGreen(float value) {
    
    green_ = value;
  }
  /**
   * <pre>
   * The amount of green in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float green = 2;</code>
   */
  private void clearGreen() {
    
    green_ = 0F;
  }

  public static final int BLUE_FIELD_NUMBER = 3;
  private float blue_;
  /**
   * <pre>
   * The amount of blue in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float blue = 3;</code>
   */
  public float getBlue() {
    return blue_;
  }
  /**
   * <pre>
   * The amount of blue in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float blue = 3;</code>
   */
  private void setBlue(float value) {
    
    blue_ = value;
  }
  /**
   * <pre>
   * The amount of blue in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>optional float blue = 3;</code>
   */
  private void clearBlue() {
    
    blue_ = 0F;
  }

  public static final int ALPHA_FIELD_NUMBER = 4;
  private com.google.protobuf.FloatValue alpha_;
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is to be rendered as a solid color
   * (as if the alpha value had been explicitly given with a value of 1.0).
   * </pre>
   *
   * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
   */
  public boolean hasAlpha() {
    return alpha_ != null;
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is to be rendered as a solid color
   * (as if the alpha value had been explicitly given with a value of 1.0).
   * </pre>
   *
   * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
   */
  public com.google.protobuf.FloatValue getAlpha() {
    return alpha_ == null ? com.google.protobuf.FloatValue.getDefaultInstance() : alpha_;
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is to be rendered as a solid color
   * (as if the alpha value had been explicitly given with a value of 1.0).
   * </pre>
   *
   * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
   */
  private void setAlpha(com.google.protobuf.FloatValue value) {
    if (value == null) {
      throw new NullPointerException();
    }
    alpha_ = value;
    
    }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is to be rendered as a solid color
   * (as if the alpha value had been explicitly given with a value of 1.0).
   * </pre>
   *
   * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
   */
  private void setAlpha(
      com.google.protobuf.FloatValue.Builder builderForValue) {
    alpha_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is to be rendered as a solid color
   * (as if the alpha value had been explicitly given with a value of 1.0).
   * </pre>
   *
   * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
   */
  private void mergeAlpha(com.google.protobuf.FloatValue value) {
    if (alpha_ != null &&
        alpha_ != com.google.protobuf.FloatValue.getDefaultInstance()) {
      alpha_ =
        com.google.protobuf.FloatValue.newBuilder(alpha_).mergeFrom(value).buildPartial();
    } else {
      alpha_ = value;
    }
    
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is to be rendered as a solid color
   * (as if the alpha value had been explicitly given with a value of 1.0).
   * </pre>
   *
   * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
   */
  private void clearAlpha() {  alpha_ = null;
    
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (red_ != 0F) {
      output.writeFloat(1, red_);
    }
    if (green_ != 0F) {
      output.writeFloat(2, green_);
    }
    if (blue_ != 0F) {
      output.writeFloat(3, blue_);
    }
    if (alpha_ != null) {
      output.writeMessage(4, getAlpha());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (red_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(1, red_);
    }
    if (green_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, green_);
    }
    if (blue_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, blue_);
    }
    if (alpha_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getAlpha());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.type.Color parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Color parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Color parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Color parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Color parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Color parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.Color parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Color parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.Color parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Color parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.type.Color prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Represents a color in the RGBA color space. This representation is designed
   * for simplicity of conversion to/from color representations in various
   * languages over compactness; for example, the fields of this representation
   * can be trivially provided to the constructor of "java.awt.Color" in Java; it
   * can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
   * method in iOS; and, with just a little work, it can be easily formatted into
   * a CSS "rgba()" string in JavaScript, as well. Here are some examples:
   * Example (Java):
   *      import com.google.type.Color;
   *      // ...
   *      public static java.awt.Color fromProto(Color protocolor) {
   *        float alpha = protocolor.hasAlpha()
   *            ? protocolor.getAlpha().getValue()
   *            : 1.0;
   *        return new java.awt.Color(
   *            protocolor.getRed(),
   *            protocolor.getGreen(),
   *            protocolor.getBlue(),
   *            alpha);
   *      }
   *      public static Color toProto(java.awt.Color color) {
   *        float red = (float) color.getRed();
   *        float green = (float) color.getGreen();
   *        float blue = (float) color.getBlue();
   *        float denominator = 255.0;
   *        Color.Builder resultBuilder =
   *            Color
   *                .newBuilder()
   *                .setRed(red / denominator)
   *                .setGreen(green / denominator)
   *                .setBlue(blue / denominator);
   *        int alpha = color.getAlpha();
   *        if (alpha != 255) {
   *          result.setAlpha(
   *              FloatValue
   *                  .newBuilder()
   *                  .setValue(((float) alpha) / denominator)
   *                  .build());
   *        }
   *        return resultBuilder.build();
   *      }
   *      // ...
   * Example (iOS / Obj-C):
   *      // ...
   *      static UIColor* fromProto(Color* protocolor) {
   *         float red = [protocolor red];
   *         float green = [protocolor green];
   *         float blue = [protocolor blue];
   *         FloatValue* alpha_wrapper = [protocolor alpha];
   *         float alpha = 1.0;
   *         if (alpha_wrapper != nil) {
   *           alpha = [alpha_wrapper value];
   *         }
   *         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
   *      }
   *      static Color* toProto(UIColor* color) {
   *          CGFloat red, green, blue, alpha;
   *          if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) {
   *            return nil;
   *          }
   *          Color* result = [Color alloc] init];
   *          [result setRed:red];
   *          [result setGreen:green];
   *          [result setBlue:blue];
   *          if (alpha &lt;= 0.9999) {
   *            [result setAlpha:floatWrapperWithValue(alpha)];
   *          }
   *          [result autorelease];
   *          return result;
   *     }
   *     // ...
   *  Example (JavaScript):
   *     // ...
   *     var protoToCssColor = function(rgb_color) {
   *        var redFrac = rgb_color.red || 0.0;
   *        var greenFrac = rgb_color.green || 0.0;
   *        var blueFrac = rgb_color.blue || 0.0;
   *        var red = Math.floor(redFrac * 255);
   *        var green = Math.floor(greenFrac * 255);
   *        var blue = Math.floor(blueFrac * 255);
   *        if (!('alpha' in rgb_color)) {
   *           return rgbToCssColor_(red, green, blue);
   *        }
   *        var alphaFrac = rgb_color.alpha.value || 0.0;
   *        var rgbParams = [red, green, blue].join(',');
   *        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
   *     };
   *     var rgbToCssColor_ = function(red, green, blue) {
   *       var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue);
   *       var hexString = rgbNumber.toString(16);
   *       var missingZeros = 6 - hexString.length;
   *       var resultBuilder = ['#'];
   *       for (var i = 0; i &lt; missingZeros; i++) {
   *          resultBuilder.push('0');
   *       }
   *       resultBuilder.push(hexString);
   *       return resultBuilder.join('');
   *     };
   *     // ...
   * </pre>
   *
   * Protobuf type {@code google.type.Color}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.type.Color, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.type.Color)
      com.google.type.ColorOrBuilder {
    // Construct using com.google.type.Color.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The amount of red in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float red = 1;</code>
     */
    public float getRed() {
      return instance.getRed();
    }
    /**
     * <pre>
     * The amount of red in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float red = 1;</code>
     */
    public Builder setRed(float value) {
      copyOnWrite();
      instance.setRed(value);
      return this;
    }
    /**
     * <pre>
     * The amount of red in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float red = 1;</code>
     */
    public Builder clearRed() {
      copyOnWrite();
      instance.clearRed();
      return this;
    }

    /**
     * <pre>
     * The amount of green in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float green = 2;</code>
     */
    public float getGreen() {
      return instance.getGreen();
    }
    /**
     * <pre>
     * The amount of green in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float green = 2;</code>
     */
    public Builder setGreen(float value) {
      copyOnWrite();
      instance.setGreen(value);
      return this;
    }
    /**
     * <pre>
     * The amount of green in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float green = 2;</code>
     */
    public Builder clearGreen() {
      copyOnWrite();
      instance.clearGreen();
      return this;
    }

    /**
     * <pre>
     * The amount of blue in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float blue = 3;</code>
     */
    public float getBlue() {
      return instance.getBlue();
    }
    /**
     * <pre>
     * The amount of blue in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float blue = 3;</code>
     */
    public Builder setBlue(float value) {
      copyOnWrite();
      instance.setBlue(value);
      return this;
    }
    /**
     * <pre>
     * The amount of blue in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>optional float blue = 3;</code>
     */
    public Builder clearBlue() {
      copyOnWrite();
      instance.clearBlue();
      return this;
    }

    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     * </pre>
     *
     * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
     */
    public boolean hasAlpha() {
      return instance.hasAlpha();
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     * </pre>
     *
     * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
     */
    public com.google.protobuf.FloatValue getAlpha() {
      return instance.getAlpha();
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     * </pre>
     *
     * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
     */
    public Builder setAlpha(com.google.protobuf.FloatValue value) {
      copyOnWrite();
      instance.setAlpha(value);
      return this;
      }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     * </pre>
     *
     * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
     */
    public Builder setAlpha(
        com.google.protobuf.FloatValue.Builder builderForValue) {
      copyOnWrite();
      instance.setAlpha(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     * </pre>
     *
     * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
     */
    public Builder mergeAlpha(com.google.protobuf.FloatValue value) {
      copyOnWrite();
      instance.mergeAlpha(value);
      return this;
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     * </pre>
     *
     * <code>optional .google.protobuf.FloatValue alpha = 4;</code>
     */
    public Builder clearAlpha() {  copyOnWrite();
      instance.clearAlpha();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.type.Color)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.type.Color();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.type.Color other = (com.google.type.Color) arg1;
        red_ = visitor.visitFloat(red_ != 0F, red_,
            other.red_ != 0F, other.red_);
        green_ = visitor.visitFloat(green_ != 0F, green_,
            other.green_ != 0F, other.green_);
        blue_ = visitor.visitFloat(blue_ != 0F, blue_,
            other.blue_ != 0F, other.blue_);
        alpha_ = visitor.visitMessage(alpha_, other.alpha_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 13: {

                red_ = input.readFloat();
                break;
              }
              case 21: {

                green_ = input.readFloat();
                break;
              }
              case 29: {

                blue_ = input.readFloat();
                break;
              }
              case 34: {
                com.google.protobuf.FloatValue.Builder subBuilder = null;
                if (alpha_ != null) {
                  subBuilder = alpha_.toBuilder();
                }
                alpha_ = input.readMessage(com.google.protobuf.FloatValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(alpha_);
                  alpha_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.type.Color.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.type.Color)
  private static final com.google.type.Color DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Color();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.type.Color getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Color> PARSER;

  public static com.google.protobuf.Parser<Color> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

