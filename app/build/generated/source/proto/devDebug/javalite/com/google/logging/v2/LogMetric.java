// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_metrics.proto

package com.google.logging.v2;

/**
 * <pre>
 * Describes a logs-based metric.  The value of the metric is the
 * number of log entries that match a logs filter.
 * </pre>
 *
 * Protobuf type {@code google.logging.v2.LogMetric}
 */
public  final class LogMetric extends
    com.google.protobuf.GeneratedMessageLite<
        LogMetric, LogMetric.Builder> implements
    // @@protoc_insertion_point(message_implements:google.logging.v2.LogMetric)
    LogMetricOrBuilder {
  private LogMetric() {
    name_ = "";
    description_ = "";
    filter_ = "";
  }
  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * Required. The client-assigned metric identifier. Example:
   * `"severe_errors"`.  Metric identifiers are limited to 1000
   * characters and can include only the following characters: `A-Z`,
   * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
   * forward-slash character (`/`) denotes a hierarchy of name pieces,
   * and it cannot be the first character of the name.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * Required. The client-assigned metric identifier. Example:
   * `"severe_errors"`.  Metric identifiers are limited to 1000
   * characters and can include only the following characters: `A-Z`,
   * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
   * forward-slash character (`/`) denotes a hierarchy of name pieces,
   * and it cannot be the first character of the name.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * Required. The client-assigned metric identifier. Example:
   * `"severe_errors"`.  Metric identifiers are limited to 1000
   * characters and can include only the following characters: `A-Z`,
   * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
   * forward-slash character (`/`) denotes a hierarchy of name pieces,
   * and it cannot be the first character of the name.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    name_ = value;
  }
  /**
   * <pre>
   * Required. The client-assigned metric identifier. Example:
   * `"severe_errors"`.  Metric identifiers are limited to 1000
   * characters and can include only the following characters: `A-Z`,
   * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
   * forward-slash character (`/`) denotes a hierarchy of name pieces,
   * and it cannot be the first character of the name.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * Required. The client-assigned metric identifier. Example:
   * `"severe_errors"`.  Metric identifiers are limited to 1000
   * characters and can include only the following characters: `A-Z`,
   * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
   * forward-slash character (`/`) denotes a hierarchy of name pieces,
   * and it cannot be the first character of the name.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    name_ = value.toStringUtf8();
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 2;
  private java.lang.String description_;
  /**
   * <pre>
   * A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>optional string description = 2;</code>
   */
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>optional string description = 2;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>optional string description = 2;</code>
   */
  private void setDescription(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    description_ = value;
  }
  /**
   * <pre>
   * A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>optional string description = 2;</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>optional string description = 2;</code>
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    description_ = value.toStringUtf8();
  }

  public static final int FILTER_FIELD_NUMBER = 3;
  private java.lang.String filter_;
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters).
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 3;</code>
   */
  public java.lang.String getFilter() {
    return filter_;
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters).
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 3;</code>
   */
  public com.google.protobuf.ByteString
      getFilterBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(filter_);
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters).
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 3;</code>
   */
  private void setFilter(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    filter_ = value;
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters).
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 3;</code>
   */
  private void clearFilter() {
    
    filter_ = getDefaultInstance().getFilter();
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters).
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 3;</code>
   */
  private void setFilterBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    filter_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!name_.isEmpty()) {
      output.writeString(1, getName());
    }
    if (!description_.isEmpty()) {
      output.writeString(2, getDescription());
    }
    if (!filter_.isEmpty()) {
      output.writeString(3, getFilter());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!name_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getName());
    }
    if (!description_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getDescription());
    }
    if (!filter_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getFilter());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.logging.v2.LogMetric parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.logging.v2.LogMetric parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.logging.v2.LogMetric parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.logging.v2.LogMetric parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.logging.v2.LogMetric parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.logging.v2.LogMetric parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.logging.v2.LogMetric parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.logging.v2.LogMetric parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.logging.v2.LogMetric parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.logging.v2.LogMetric parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.logging.v2.LogMetric prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Describes a logs-based metric.  The value of the metric is the
   * number of log entries that match a logs filter.
   * </pre>
   *
   * Protobuf type {@code google.logging.v2.LogMetric}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.logging.v2.LogMetric, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.logging.v2.LogMetric)
      com.google.logging.v2.LogMetricOrBuilder {
    // Construct using com.google.logging.v2.LogMetric.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Required. The client-assigned metric identifier. Example:
     * `"severe_errors"`.  Metric identifiers are limited to 1000
     * characters and can include only the following characters: `A-Z`,
     * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
     * forward-slash character (`/`) denotes a hierarchy of name pieces,
     * and it cannot be the first character of the name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * Required. The client-assigned metric identifier. Example:
     * `"severe_errors"`.  Metric identifiers are limited to 1000
     * characters and can include only the following characters: `A-Z`,
     * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
     * forward-slash character (`/`) denotes a hierarchy of name pieces,
     * and it cannot be the first character of the name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * Required. The client-assigned metric identifier. Example:
     * `"severe_errors"`.  Metric identifiers are limited to 1000
     * characters and can include only the following characters: `A-Z`,
     * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
     * forward-slash character (`/`) denotes a hierarchy of name pieces,
     * and it cannot be the first character of the name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * Required. The client-assigned metric identifier. Example:
     * `"severe_errors"`.  Metric identifiers are limited to 1000
     * characters and can include only the following characters: `A-Z`,
     * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
     * forward-slash character (`/`) denotes a hierarchy of name pieces,
     * and it cannot be the first character of the name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * Required. The client-assigned metric identifier. Example:
     * `"severe_errors"`.  Metric identifiers are limited to 1000
     * characters and can include only the following characters: `A-Z`,
     * `a-z`, `0-9`, and the special characters `_-.,+!*',()%/&#92;`.  The
     * forward-slash character (`/`) denotes a hierarchy of name pieces,
     * and it cannot be the first character of the name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * A description of this metric, which is used in documentation.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * A description of this metric, which is used in documentation.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * A description of this metric, which is used in documentation.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * A description of this metric, which is used in documentation.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * A description of this metric, which is used in documentation.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters).
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 3;</code>
     */
    public java.lang.String getFilter() {
      return instance.getFilter();
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters).
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 3;</code>
     */
    public com.google.protobuf.ByteString
        getFilterBytes() {
      return instance.getFilterBytes();
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters).
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 3;</code>
     */
    public Builder setFilter(
        java.lang.String value) {
      copyOnWrite();
      instance.setFilter(value);
      return this;
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters).
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 3;</code>
     */
    public Builder clearFilter() {
      copyOnWrite();
      instance.clearFilter();
      return this;
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters).
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 3;</code>
     */
    public Builder setFilterBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFilterBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.logging.v2.LogMetric)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.logging.v2.LogMetric();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.logging.v2.LogMetric other = (com.google.logging.v2.LogMetric) arg1;
        name_ = visitor.visitString(!name_.isEmpty(), name_,
            !other.name_.isEmpty(), other.name_);
        description_ = visitor.visitString(!description_.isEmpty(), description_,
            !other.description_.isEmpty(), other.description_);
        filter_ = visitor.visitString(!filter_.isEmpty(), filter_,
            !other.filter_.isEmpty(), other.filter_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                description_ = s;
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                filter_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.logging.v2.LogMetric.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.logging.v2.LogMetric)
  private static final com.google.logging.v2.LogMetric DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new LogMetric();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.logging.v2.LogMetric getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<LogMetric> PARSER;

  public static com.google.protobuf.Parser<LogMetric> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

