// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

package com.google.logging.v2;

/**
 * <pre>
 * Describes a sink used to export log entries outside Cloud Logging.
 * </pre>
 *
 * Protobuf type {@code google.logging.v2.LogSink}
 */
public  final class LogSink extends
    com.google.protobuf.GeneratedMessageLite<
        LogSink, LogSink.Builder> implements
    // @@protoc_insertion_point(message_implements:google.logging.v2.LogSink)
    LogSinkOrBuilder {
  private LogSink() {
    name_ = "";
    destination_ = "";
    filter_ = "";
  }
  /**
   * <pre>
   * Available log entry formats. Log entries can be written to Cloud
   * Logging in either format and can be exported in either format.
   * Version 2 is the preferred format.
   * </pre>
   *
   * Protobuf enum {@code google.logging.v2.LogSink.VersionFormat}
   */
  public enum VersionFormat
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * An unspecified version format will default to V2.
     * </pre>
     *
     * <code>VERSION_FORMAT_UNSPECIFIED = 0;</code>
     */
    VERSION_FORMAT_UNSPECIFIED(0),
    /**
     * <pre>
     * `LogEntry` version 2 format.
     * </pre>
     *
     * <code>V2 = 1;</code>
     */
    V2(1),
    /**
     * <pre>
     * `LogEntry` version 1 format.
     * </pre>
     *
     * <code>V1 = 2;</code>
     */
    V1(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * An unspecified version format will default to V2.
     * </pre>
     *
     * <code>VERSION_FORMAT_UNSPECIFIED = 0;</code>
     */
    public static final int VERSION_FORMAT_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * `LogEntry` version 2 format.
     * </pre>
     *
     * <code>V2 = 1;</code>
     */
    public static final int V2_VALUE = 1;
    /**
     * <pre>
     * `LogEntry` version 1 format.
     * </pre>
     *
     * <code>V1 = 2;</code>
     */
    public static final int V1_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VersionFormat valueOf(int value) {
      return forNumber(value);
    }

    public static VersionFormat forNumber(int value) {
      switch (value) {
        case 0: return VERSION_FORMAT_UNSPECIFIED;
        case 1: return V2;
        case 2: return V1;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<VersionFormat>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        VersionFormat> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<VersionFormat>() {
            public VersionFormat findValueByNumber(int number) {
              return VersionFormat.forNumber(number);
            }
          };

    private final int value;

    private VersionFormat(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.logging.v2.LogSink.VersionFormat)
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    name_ = value;
  }
  /**
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * Required. The client-assigned sink identifier. Example:
   * `"my-severe-errors-to-pubsub"`.
   * Sink identifiers are limited to 1000 characters
   * and can include only the following characters: `A-Z`, `a-z`,
   * `0-9`, and the special characters `_-.`.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    name_ = value.toStringUtf8();
  }

  public static final int DESTINATION_FIELD_NUMBER = 3;
  private java.lang.String destination_;
  /**
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   *
   * <code>optional string destination = 3;</code>
   */
  public java.lang.String getDestination() {
    return destination_;
  }
  /**
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   *
   * <code>optional string destination = 3;</code>
   */
  public com.google.protobuf.ByteString
      getDestinationBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(destination_);
  }
  /**
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   *
   * <code>optional string destination = 3;</code>
   */
  private void setDestination(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    destination_ = value;
  }
  /**
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   *
   * <code>optional string destination = 3;</code>
   */
  private void clearDestination() {
    
    destination_ = getDefaultInstance().getDestination();
  }
  /**
   * <pre>
   * The export destination. See
   * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
   * Examples: `"storage.googleapis.com/a-bucket"`,
   * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
   * </pre>
   *
   * <code>optional string destination = 3;</code>
   */
  private void setDestinationBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    destination_ = value.toStringUtf8();
  }

  public static final int FILTER_FIELD_NUMBER = 5;
  private java.lang.String filter_;
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 5;</code>
   */
  public java.lang.String getFilter() {
    return filter_;
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 5;</code>
   */
  public com.google.protobuf.ByteString
      getFilterBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(filter_);
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 5;</code>
   */
  private void setFilter(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    filter_ = value;
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 5;</code>
   */
  private void clearFilter() {
    
    filter_ = getDefaultInstance().getFilter();
  }
  /**
   * <pre>
   * An [advanced logs filter](/logging/docs/view/advanced_filters)
   * that defines the log entries to be exported.  The filter must be
   * consistent with the log entry format designed by the
   * `outputVersionFormat` parameter, regardless of the format of the
   * log entry that was originally written to Cloud Logging.
   * Example: `"logName:syslog AND severity&gt;=ERROR"`.
   * </pre>
   *
   * <code>optional string filter = 5;</code>
   */
  private void setFilterBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    filter_ = value.toStringUtf8();
  }

  public static final int OUTPUT_VERSION_FORMAT_FIELD_NUMBER = 6;
  private int outputVersionFormat_;
  /**
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   */
  public int getOutputVersionFormatValue() {
    return outputVersionFormat_;
  }
  /**
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   */
  public com.google.logging.v2.LogSink.VersionFormat getOutputVersionFormat() {
    com.google.logging.v2.LogSink.VersionFormat result = com.google.logging.v2.LogSink.VersionFormat.forNumber(outputVersionFormat_);
    return result == null ? com.google.logging.v2.LogSink.VersionFormat.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   */
  private void setOutputVersionFormatValue(int value) {
      outputVersionFormat_ = value;
  }
  /**
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   */
  private void setOutputVersionFormat(com.google.logging.v2.LogSink.VersionFormat value) {
    if (value == null) {
      throw new NullPointerException();
    }
    
    outputVersionFormat_ = value.getNumber();
  }
  /**
   * <pre>
   * The log entry version used when exporting log entries from this
   * sink.  This version does not have to correspond to the version of
   * the log entry when it was written to Cloud Logging.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
   */
  private void clearOutputVersionFormat() {
    
    outputVersionFormat_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!name_.isEmpty()) {
      output.writeString(1, getName());
    }
    if (!destination_.isEmpty()) {
      output.writeString(3, getDestination());
    }
    if (!filter_.isEmpty()) {
      output.writeString(5, getFilter());
    }
    if (outputVersionFormat_ != com.google.logging.v2.LogSink.VersionFormat.VERSION_FORMAT_UNSPECIFIED.getNumber()) {
      output.writeEnum(6, outputVersionFormat_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!name_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getName());
    }
    if (!destination_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getDestination());
    }
    if (!filter_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getFilter());
    }
    if (outputVersionFormat_ != com.google.logging.v2.LogSink.VersionFormat.VERSION_FORMAT_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, outputVersionFormat_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.logging.v2.LogSink parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.logging.v2.LogSink parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.logging.v2.LogSink parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.logging.v2.LogSink parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.logging.v2.LogSink parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.logging.v2.LogSink parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.logging.v2.LogSink parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.logging.v2.LogSink parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.logging.v2.LogSink parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.logging.v2.LogSink parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.logging.v2.LogSink prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Describes a sink used to export log entries outside Cloud Logging.
   * </pre>
   *
   * Protobuf type {@code google.logging.v2.LogSink}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.logging.v2.LogSink, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.logging.v2.LogSink)
      com.google.logging.v2.LogSinkOrBuilder {
    // Construct using com.google.logging.v2.LogSink.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Required. The client-assigned sink identifier. Example:
     * `"my-severe-errors-to-pubsub"`.
     * Sink identifiers are limited to 1000 characters
     * and can include only the following characters: `A-Z`, `a-z`,
     * `0-9`, and the special characters `_-.`.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * Required. The client-assigned sink identifier. Example:
     * `"my-severe-errors-to-pubsub"`.
     * Sink identifiers are limited to 1000 characters
     * and can include only the following characters: `A-Z`, `a-z`,
     * `0-9`, and the special characters `_-.`.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * Required. The client-assigned sink identifier. Example:
     * `"my-severe-errors-to-pubsub"`.
     * Sink identifiers are limited to 1000 characters
     * and can include only the following characters: `A-Z`, `a-z`,
     * `0-9`, and the special characters `_-.`.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * Required. The client-assigned sink identifier. Example:
     * `"my-severe-errors-to-pubsub"`.
     * Sink identifiers are limited to 1000 characters
     * and can include only the following characters: `A-Z`, `a-z`,
     * `0-9`, and the special characters `_-.`.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * Required. The client-assigned sink identifier. Example:
     * `"my-severe-errors-to-pubsub"`.
     * Sink identifiers are limited to 1000 characters
     * and can include only the following characters: `A-Z`, `a-z`,
     * `0-9`, and the special characters `_-.`.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The export destination. See
     * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
     * Examples: `"storage.googleapis.com/a-bucket"`,
     * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
     * </pre>
     *
     * <code>optional string destination = 3;</code>
     */
    public java.lang.String getDestination() {
      return instance.getDestination();
    }
    /**
     * <pre>
     * The export destination. See
     * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
     * Examples: `"storage.googleapis.com/a-bucket"`,
     * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
     * </pre>
     *
     * <code>optional string destination = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDestinationBytes() {
      return instance.getDestinationBytes();
    }
    /**
     * <pre>
     * The export destination. See
     * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
     * Examples: `"storage.googleapis.com/a-bucket"`,
     * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
     * </pre>
     *
     * <code>optional string destination = 3;</code>
     */
    public Builder setDestination(
        java.lang.String value) {
      copyOnWrite();
      instance.setDestination(value);
      return this;
    }
    /**
     * <pre>
     * The export destination. See
     * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
     * Examples: `"storage.googleapis.com/a-bucket"`,
     * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
     * </pre>
     *
     * <code>optional string destination = 3;</code>
     */
    public Builder clearDestination() {
      copyOnWrite();
      instance.clearDestination();
      return this;
    }
    /**
     * <pre>
     * The export destination. See
     * [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
     * Examples: `"storage.googleapis.com/a-bucket"`,
     * `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
     * </pre>
     *
     * <code>optional string destination = 3;</code>
     */
    public Builder setDestinationBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDestinationBytes(value);
      return this;
    }

    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters)
     * that defines the log entries to be exported.  The filter must be
     * consistent with the log entry format designed by the
     * `outputVersionFormat` parameter, regardless of the format of the
     * log entry that was originally written to Cloud Logging.
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 5;</code>
     */
    public java.lang.String getFilter() {
      return instance.getFilter();
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters)
     * that defines the log entries to be exported.  The filter must be
     * consistent with the log entry format designed by the
     * `outputVersionFormat` parameter, regardless of the format of the
     * log entry that was originally written to Cloud Logging.
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 5;</code>
     */
    public com.google.protobuf.ByteString
        getFilterBytes() {
      return instance.getFilterBytes();
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters)
     * that defines the log entries to be exported.  The filter must be
     * consistent with the log entry format designed by the
     * `outputVersionFormat` parameter, regardless of the format of the
     * log entry that was originally written to Cloud Logging.
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 5;</code>
     */
    public Builder setFilter(
        java.lang.String value) {
      copyOnWrite();
      instance.setFilter(value);
      return this;
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters)
     * that defines the log entries to be exported.  The filter must be
     * consistent with the log entry format designed by the
     * `outputVersionFormat` parameter, regardless of the format of the
     * log entry that was originally written to Cloud Logging.
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 5;</code>
     */
    public Builder clearFilter() {
      copyOnWrite();
      instance.clearFilter();
      return this;
    }
    /**
     * <pre>
     * An [advanced logs filter](/logging/docs/view/advanced_filters)
     * that defines the log entries to be exported.  The filter must be
     * consistent with the log entry format designed by the
     * `outputVersionFormat` parameter, regardless of the format of the
     * log entry that was originally written to Cloud Logging.
     * Example: `"logName:syslog AND severity&gt;=ERROR"`.
     * </pre>
     *
     * <code>optional string filter = 5;</code>
     */
    public Builder setFilterBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFilterBytes(value);
      return this;
    }

    /**
     * <pre>
     * The log entry version used when exporting log entries from this
     * sink.  This version does not have to correspond to the version of
     * the log entry when it was written to Cloud Logging.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
     */
    public int getOutputVersionFormatValue() {
      return instance.getOutputVersionFormatValue();
    }
    /**
     * <pre>
     * The log entry version used when exporting log entries from this
     * sink.  This version does not have to correspond to the version of
     * the log entry when it was written to Cloud Logging.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
     */
    public Builder setOutputVersionFormatValue(int value) {
      copyOnWrite();
      instance.setOutputVersionFormatValue(value);
      return this;
    }
    /**
     * <pre>
     * The log entry version used when exporting log entries from this
     * sink.  This version does not have to correspond to the version of
     * the log entry when it was written to Cloud Logging.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
     */
    public com.google.logging.v2.LogSink.VersionFormat getOutputVersionFormat() {
      return instance.getOutputVersionFormat();
    }
    /**
     * <pre>
     * The log entry version used when exporting log entries from this
     * sink.  This version does not have to correspond to the version of
     * the log entry when it was written to Cloud Logging.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
     */
    public Builder setOutputVersionFormat(com.google.logging.v2.LogSink.VersionFormat value) {
      copyOnWrite();
      instance.setOutputVersionFormat(value);
      return this;
    }
    /**
     * <pre>
     * The log entry version used when exporting log entries from this
     * sink.  This version does not have to correspond to the version of
     * the log entry when it was written to Cloud Logging.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink.VersionFormat output_version_format = 6;</code>
     */
    public Builder clearOutputVersionFormat() {
      copyOnWrite();
      instance.clearOutputVersionFormat();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.logging.v2.LogSink)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.logging.v2.LogSink();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.logging.v2.LogSink other = (com.google.logging.v2.LogSink) arg1;
        name_ = visitor.visitString(!name_.isEmpty(), name_,
            !other.name_.isEmpty(), other.name_);
        destination_ = visitor.visitString(!destination_.isEmpty(), destination_,
            !other.destination_.isEmpty(), other.destination_);
        filter_ = visitor.visitString(!filter_.isEmpty(), filter_,
            !other.filter_.isEmpty(), other.filter_);
        outputVersionFormat_ = visitor.visitInt(outputVersionFormat_ != 0, outputVersionFormat_,    other.outputVersionFormat_ != 0, other.outputVersionFormat_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                destination_ = s;
                break;
              }
              case 42: {
                String s = input.readStringRequireUtf8();

                filter_ = s;
                break;
              }
              case 48: {
                int rawValue = input.readEnum();

                outputVersionFormat_ = rawValue;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.logging.v2.LogSink.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.logging.v2.LogSink)
  private static final com.google.logging.v2.LogSink DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new LogSink();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.logging.v2.LogSink getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<LogSink> PARSER;

  public static com.google.protobuf.Parser<LogSink> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

