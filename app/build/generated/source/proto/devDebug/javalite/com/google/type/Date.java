// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/date.proto

package com.google.type;

/**
 * <pre>
 * Represents a whole calendar date, e.g. date of birth. The time of day and
 * time zone are either specified elsewhere or are not significant. The date
 * is relative to the Proleptic Gregorian Calendar. The day may be 0 to
 * represent a year and month where the day is not significant, e.g. credit card
 * expiration date. The year may be 0 to represent a month and day independent
 * of year, e.g. anniversary date. Related types are [google.type.TimeOfDay][google.type.TimeOfDay]
 * and [google.protobuf.Timestamp][google.protobuf.Timestamp].
 * </pre>
 *
 * Protobuf type {@code google.type.Date}
 */
public  final class Date extends
    com.google.protobuf.GeneratedMessageLite<
        Date, Date.Builder> implements
    // @@protoc_insertion_point(message_implements:google.type.Date)
    DateOrBuilder {
  private Date() {
  }
  public static final int YEAR_FIELD_NUMBER = 1;
  private int year_;
  /**
   * <pre>
   * Year of date. Must be from 1 to 9,999, or 0 if specifying a date without
   * a year.
   * </pre>
   *
   * <code>optional int32 year = 1;</code>
   */
  public int getYear() {
    return year_;
  }
  /**
   * <pre>
   * Year of date. Must be from 1 to 9,999, or 0 if specifying a date without
   * a year.
   * </pre>
   *
   * <code>optional int32 year = 1;</code>
   */
  private void setYear(int value) {
    
    year_ = value;
  }
  /**
   * <pre>
   * Year of date. Must be from 1 to 9,999, or 0 if specifying a date without
   * a year.
   * </pre>
   *
   * <code>optional int32 year = 1;</code>
   */
  private void clearYear() {
    
    year_ = 0;
  }

  public static final int MONTH_FIELD_NUMBER = 2;
  private int month_;
  /**
   * <pre>
   * Month of year of date. Must be from 1 to 12.
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  public int getMonth() {
    return month_;
  }
  /**
   * <pre>
   * Month of year of date. Must be from 1 to 12.
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  private void setMonth(int value) {
    
    month_ = value;
  }
  /**
   * <pre>
   * Month of year of date. Must be from 1 to 12.
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  private void clearMonth() {
    
    month_ = 0;
  }

  public static final int DAY_FIELD_NUMBER = 3;
  private int day_;
  /**
   * <pre>
   * Day of month. Must be from 1 to 31 and valid for the year and month, or 0
   * if specifying a year/month where the day is not sigificant.
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  public int getDay() {
    return day_;
  }
  /**
   * <pre>
   * Day of month. Must be from 1 to 31 and valid for the year and month, or 0
   * if specifying a year/month where the day is not sigificant.
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  private void setDay(int value) {
    
    day_ = value;
  }
  /**
   * <pre>
   * Day of month. Must be from 1 to 31 and valid for the year and month, or 0
   * if specifying a year/month where the day is not sigificant.
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  private void clearDay() {
    
    day_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (year_ != 0) {
      output.writeInt32(1, year_);
    }
    if (month_ != 0) {
      output.writeInt32(2, month_);
    }
    if (day_ != 0) {
      output.writeInt32(3, day_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (year_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, year_);
    }
    if (month_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, month_);
    }
    if (day_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, day_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.type.Date parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Date parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Date parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.Date parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Date parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.type.Date prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Represents a whole calendar date, e.g. date of birth. The time of day and
   * time zone are either specified elsewhere or are not significant. The date
   * is relative to the Proleptic Gregorian Calendar. The day may be 0 to
   * represent a year and month where the day is not significant, e.g. credit card
   * expiration date. The year may be 0 to represent a month and day independent
   * of year, e.g. anniversary date. Related types are [google.type.TimeOfDay][google.type.TimeOfDay]
   * and [google.protobuf.Timestamp][google.protobuf.Timestamp].
   * </pre>
   *
   * Protobuf type {@code google.type.Date}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.type.Date, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.type.Date)
      com.google.type.DateOrBuilder {
    // Construct using com.google.type.Date.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Year of date. Must be from 1 to 9,999, or 0 if specifying a date without
     * a year.
     * </pre>
     *
     * <code>optional int32 year = 1;</code>
     */
    public int getYear() {
      return instance.getYear();
    }
    /**
     * <pre>
     * Year of date. Must be from 1 to 9,999, or 0 if specifying a date without
     * a year.
     * </pre>
     *
     * <code>optional int32 year = 1;</code>
     */
    public Builder setYear(int value) {
      copyOnWrite();
      instance.setYear(value);
      return this;
    }
    /**
     * <pre>
     * Year of date. Must be from 1 to 9,999, or 0 if specifying a date without
     * a year.
     * </pre>
     *
     * <code>optional int32 year = 1;</code>
     */
    public Builder clearYear() {
      copyOnWrite();
      instance.clearYear();
      return this;
    }

    /**
     * <pre>
     * Month of year of date. Must be from 1 to 12.
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public int getMonth() {
      return instance.getMonth();
    }
    /**
     * <pre>
     * Month of year of date. Must be from 1 to 12.
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public Builder setMonth(int value) {
      copyOnWrite();
      instance.setMonth(value);
      return this;
    }
    /**
     * <pre>
     * Month of year of date. Must be from 1 to 12.
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public Builder clearMonth() {
      copyOnWrite();
      instance.clearMonth();
      return this;
    }

    /**
     * <pre>
     * Day of month. Must be from 1 to 31 and valid for the year and month, or 0
     * if specifying a year/month where the day is not sigificant.
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public int getDay() {
      return instance.getDay();
    }
    /**
     * <pre>
     * Day of month. Must be from 1 to 31 and valid for the year and month, or 0
     * if specifying a year/month where the day is not sigificant.
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public Builder setDay(int value) {
      copyOnWrite();
      instance.setDay(value);
      return this;
    }
    /**
     * <pre>
     * Day of month. Must be from 1 to 31 and valid for the year and month, or 0
     * if specifying a year/month where the day is not sigificant.
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public Builder clearDay() {
      copyOnWrite();
      instance.clearDay();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.type.Date)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.type.Date();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.type.Date other = (com.google.type.Date) arg1;
        year_ = visitor.visitInt(year_ != 0, year_,
            other.year_ != 0, other.year_);
        month_ = visitor.visitInt(month_ != 0, month_,
            other.month_ != 0, other.month_);
        day_ = visitor.visitInt(day_ != 0, day_,
            other.day_ != 0, other.day_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                year_ = input.readInt32();
                break;
              }
              case 16: {

                month_ = input.readInt32();
                break;
              }
              case 24: {

                day_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.type.Date.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.type.Date)
  private static final com.google.type.Date DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Date();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.type.Date getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Date> PARSER;

  public static com.google.protobuf.Parser<Date> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

